// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamHolidayPlanner.Data;

namespace TeamHolidayPlanner.Data.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    [Migration("20181006123514_UpdateRoleNameType")]
    partial class UpdateRoleNameType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeamHolidayPlanner.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DepartmentID");

                    b.Property<int>("EmploymentGradeID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.Property<int?>("UserID");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmploymentGradeID");

                    b.HasIndex("UserID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.EmployeeHoliday", b =>
                {
                    b.Property<int>("EmployeeHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Authorised");

                    b.Property<string>("AuthorisedBy");

                    b.Property<DateTime?>("AuthorisedDate");

                    b.Property<int>("EmployeeID");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HolidayPeriodID");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("EmployeeHolidayId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HolidayPeriodID");

                    b.ToTable("EmployeeHoliday");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.EmploymentGrade", b =>
                {
                    b.Property<int>("EmploymentGradeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualLeaveEntitlement");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Grade")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("EmploymentGradeID");

                    b.ToTable("EmploymentGrade");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.HolidayPeriod", b =>
                {
                    b.Property<int>("HolidayPeriodID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("HolidayPeriodID");

                    b.ToTable("HolidayPeriod");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.HasKey("PermissionID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.RolePermission", b =>
                {
                    b.Property<int>("RoleID");

                    b.Property<int>("PermissionID");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("RoleID");

                    b.Property<string>("UserName");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.Employee", b =>
                {
                    b.HasOne("TeamHolidayPlanner.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamHolidayPlanner.Domain.EmploymentGrade", "EmploymentGrade")
                        .WithMany()
                        .HasForeignKey("EmploymentGradeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamHolidayPlanner.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.EmployeeHoliday", b =>
                {
                    b.HasOne("TeamHolidayPlanner.Domain.Employee", "Employee")
                        .WithMany("Holidays")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamHolidayPlanner.Domain.HolidayPeriod", "HolidayPeriod")
                        .WithMany()
                        .HasForeignKey("HolidayPeriodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.RolePermission", b =>
                {
                    b.HasOne("TeamHolidayPlanner.Domain.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamHolidayPlanner.Domain.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeamHolidayPlanner.Domain.User", b =>
                {
                    b.HasOne("TeamHolidayPlanner.Domain.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleID");
                });
#pragma warning restore 612, 618
        }
    }
}
